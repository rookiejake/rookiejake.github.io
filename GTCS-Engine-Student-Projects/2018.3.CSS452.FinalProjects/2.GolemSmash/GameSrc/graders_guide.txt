This is just a brief doc. to explain some of the things we've done.

For the official requirements...
1) We have more than 3 scenes, which you can find in our Scenes folder.

2a) We have MANY game objects, such as Arrow/FireArrow/IceArrow/Hero/Golem/
    Terrain/Platform/etc...

2b) We have many more than 10 instances of objects. I believe our initialization 
    function makes ~25 objects, and more are created dynamically.

2c) We do not support per-pixel accurate collisions, as they were not natural to 
    implement for our game. This is by the approval of Kelvin, in exchange for 
    other features.

3) We only have 1 Camera view, again by the approval of Kelvin in exchange for 
   other features.

4a) Our boss has interpolated movement, and we use a CameraShake when our Hero 
    takes damage.

4b) Our boss is autonomous, and our purple projectile attack has chase behavior. 

5) All (or pretty much all) of our game objects are Physics enabled, and most 
   of them interact with the environment (exceptions are the Golem and its 
   projectiles).

6a) We have a Directional light serving as our primary ambient light. We also
    have 22 possible Point Lights active at any given time. 4 are for the Torch
    objects, 1 is for the green projectile, 1 is for the purple projectile, and
    16 are reserved for the Fire/Ice arrows. We do not support a Spotlight, as
    we didn't see a use for it. This was approved by Kelvin in exchange for other
    features.

6b) Most of our objects are equipped with normal maps.

7) We are a four-person team, but we supported BOTH the Particle and Shadow
   systems. Fire/Ice arrows and Torches all have particle effects, and most
   GameObject's have shadows.

8) This is up to you. :)

OTHER THINGS:

Engine Work:
* Modified the Physics engine to support a feature similat to onCollisionEnter2D
  from Unity. Each time there is a collision between two Physics objects, each
  object will call the userCollisionHandling function, passing the other object
  as a paramter. Example:
  i.userCollisionHandling(j);
  j.userCollisionHandling(i);

  These functions have a default implementation in the GameObject.js file which
  simply returns false. The user has the option of returning nothing, or returning
  true from these functions, along with handling the collision in any way they
  wish. If they return true from either function, the Physics engine will skip
  the positionalCorrection and resolveCollision calls. We use this to have
  certain physics-enabled objects (such as the Golem projectiles) ignore all
  collisions with objects other than the Hero (and IceArrow in the case of the
  Homing projectile).

* Created a RigidSet which facilitates the use of multiple Rigidbodies for a
  single GameObject. This is related to the EmptyGameObject file as well.
  EmptyGameObject serves as a GameObject with no Renderable, and just a Rigidbody,
  as well as a reference to its parent object & x/y offsets so that it can be
  properly positioned with respect to its parent.

* We modified the Light engine to support up to 24 or 25 Lights, don't remember which.

* I personally remember adding functions to several other engine components, but
  I don't remember which.

The Golem:
* It has 10+ states (depending on how you define a state, could be many more).

* It has a set of (I think) 7 Rigidbodies that make up the hitbox. These are
  configured so that it's fairly reasonable to animate them, though still tedious.

* It has a Melee attack (if the Hero is close enough) which applies a knockback
  effect to the Hero, and showcases the animated Rigidbodies.

* It has two projectile attacks (Homing and Blast, you can ignore the Salvo/
  Burst projectile file, as those were stretch goals). 
  
  The Homing projectile generates a spinning magical symbol above the boss. It 
  grows in size as it spins and then chases the Hero, guaranteeing a hit. The 
  Hero can prevent this by firing an IceArrow at the projectile. Upon hitting 
  it, the projectile will be stunned briefly, and then will fly in a linear path, 
  no longer tracking the Hero. 

  Also, the "Blast" attack is the green ring that encircles the Golem,
  similar to the purple one, and then fires at the Hero's current location, but
  does not track. 

* Check out the Golem_Rigidbodies and Golem_Animation files to see how the
  RigidSet is animated/created.

The Arrows:
// Hopefully someone fills this in.

Config:
* While there are still a few hard-coded values, we generally tried to keep as
  much of them as possible in our Config files (in the Config folder). This is
  just a system of constants that is referenced through the Global variable
  "Config", but it allows us to keep our code extremely readable and organized.

Lighting:
// Hopefully someone fills this in.